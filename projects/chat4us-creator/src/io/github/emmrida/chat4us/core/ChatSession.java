/**
 * Copyright (c) 2025 El Mhadder Mohamed Rida. All rights reserved.
 * This code is licensed under the [MIT License](https://opensource.org/licenses/MIT).
 */
package io.github.emmrida.chat4us.core;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import io.github.emmrida.chat4us.ria.NodePanel;
import io.github.emmrida.chat4us.util.Messages;

/**
 * Chat session. This is to isolate chat sessions.
 *
 * @author El Mhadder Mohamed Rida
 */
public class ChatSession {

	public static enum ChatSessionState { CHATBOT, AIMODEL, AGENT, WEBSITE }; // WEBSITE is a special case.

	private static int nextId = 1;

	private int id;
	private ChatSessionState state;
	private ChatSession rootSession = null;
	private Map<String, String> vars;
	private long creationTime;

	private boolean ended = false;
	private NodePanel.Data currentNode = null;

	private int aiGroupId = -1;
	private int nAiContextLines = 5;
	private List<String> chatMsg;
	private long lastMsgTime = 0L;
	private String botName = "ChatBot"; //$NON-NLS-1$
	private Map<String, String> aiModelParams;
	private String aiModelGuidelines = ""; //$NON-NLS-1$
	private String botScript = ""; //$NON-NLS-1$

	// Agent section
	private int agentId = -1;
	private String agentIp = null;
	private int agentPort = -1;
	private String userId = null;

	// Locale section
	private String curLocale = null;

	/**
	 * Init the chat session.
	 */
	public ChatSession() {
		this.id = nextId++;
		this.vars = new HashMap<>();
		this.chatMsg = new ArrayList<>();
		this.aiModelParams = new HashMap<>();
		this.state = ChatSessionState.CHATBOT;
		this.creationTime = System.currentTimeMillis();
		this.nAiContextLines = io.github.emmrida.chat4us.gui.MainWindow.getSettings().getAiContextLines();
	}

	/**
	 * Init a chat session using an old one.
	 * @param ses Source chat session.
	 */
	public ChatSession(ChatSession ses) {
		this();
		this.state = ses.state;
		this.vars = new HashMap<>(ses.vars);
		this.ended = ses.ended;
		this.currentNode = ses.currentNode;
		this.nAiContextLines = ses.nAiContextLines;
		this.chatMsg = new ArrayList<>(ses.chatMsg);
		this.botName = ses.botName;
		this.aiModelParams = new HashMap<>(ses.aiModelParams);
		this.aiModelGuidelines = ses.aiModelGuidelines;
		this.botScript = ses.botScript;
		this.curLocale = ses.curLocale;
		this.rootSession = ses;
	}

	/**
	 * Updates the root chat session using a source one. This is usefull when reloading a RIA file
	 * that has changed so as the ChatServer run the latest version of the RIA file.
	 * @param riaSes Source chat session.
	 */
	public void updateRootSession(ChatSession riaSes) {
		Objects.requireNonNull(riaSes);
		this.botName = riaSes.botName;
		this.aiModelGuidelines = riaSes.aiModelGuidelines;
		this.botScript = riaSes.botScript;
		this.aiModelParams = riaSes.aiModelParams;
		this.rootSession = riaSes;
	}

	/**
	 * Adds a message to the history list.
	 * @param isBot The message is sent by a remote user or generated.
	 * @param msg The message.
	 */
	public void addHistoryChatMessage(boolean isBot, String msg) {
		if(msg.isEmpty() || msg.startsWith("{")) return; //$NON-NLS-1$
		if(isBot && msg.startsWith(botName)) {
			this.chatMsg.add(msg.replaceAll("\n", "\\n")); //$NON-NLS-1$ //$NON-NLS-2$
		} else this.chatMsg.add((isBot ? state.toString() : "User"  ) + " : " +  msg.replaceAll("\n", "\\n")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
		lastMsgTime = System.currentTimeMillis();
	}

	/**
	 * Called to flag the chat session as switched to an agent/messenger app.
	 * @param agentId Id of the agent record on database.
	 * @param agentIp Ip of the machine agent messenger app is running on.
	 * @param agentPort Port number on the machine agent messenger app is running on.
	 * @param userId Id of the user. This is generated by the integrated IFrame on the website.
	 */
	public void switchToAgentChatSession(int agentId, String agentIp, int agentPort, String userId) {
		this.agentId = agentId;
		this.agentIp = agentIp;
		this.agentPort = agentPort;
		this.userId = userId;
		this.state = ChatSessionState.AGENT;
	}

	/**
	 * Sets the Id of the AI group the chat session belongs to. This is to be called once per chat session.
	 * If it is called more than once, an exception will be thrown.
	 * @param aigId Id of the AI group.
	 */
	public void setAIGroupId(int aigId) {
		if(this.aiGroupId >= 0)
			throw new IllegalStateException(Messages.getString("ChatSession.EX_AIG_SET_AGAIN")); //$NON-NLS-1$
		this.aiGroupId = aigId;
	}

	/**
	 * Get the Id of the AI group the chat session belongs to.
	 * @return Id of the AI group.
	 */
	public int getAIGroupId() { return this.aiGroupId; }

	/**
	 * Sets current locale of the chat session
	 * @param locale Locale id AR, EN, FR, etc.
	 * @param ses Chat session object.
	 */
	public void setCurLocale(String locale, ChatSession ses) {
		this.curLocale = locale;
		if(ses != null) {
			this.botName = ses.botName;
			this.aiModelGuidelines = ses.aiModelGuidelines;
			this.botScript = ses.botScript;
			this.aiModelParams = ses.aiModelParams;
		}
	}

	/**
	 * @return Current locale.
	 */
	public String getCurLocale() { return this.curLocale; }

	/*
	 * @return Agent id, -1 on error.
	 */
	public int getAgentId() { return this.agentId; }

	/**
	 * @return Ip of the agent machine, null on error.
	 */
	public String getAgentIp() { return this.agentIp; }

	/**
	 * @return Agent messenger port number.
	 */
	public int getAgentPort() { return this.agentPort; }

	/**
	 * @return User id.
	 */
	public String getUserId() { return this.userId; }

	/**
	 * Sets the remote user id.
	 * @param userId User id.
	 */
	public void setUserId(String userId) { this.userId = userId; }

	/**
	 * @return Id of the AI model of this instance.
	 */
	public int getId() { return this.id; }

	/**
	 * @return Chat session state.
	 */
	public ChatSessionState getState() { return this.state; }

	/**
	 * Sets the state of this chat session.
	 * @param state The new state of this chat session.
	 */
	public void setState(ChatSessionState state) { this.state = state; }

	/**
	 * Sets the value of a variable identified by the key param.
	 * @param key Name of the variable.
	 * @param value New value of the variable.
	 */
	public void setVar(String key, String value) { this.vars.put(key, value); }

	/**
	 * Gets the value of a variable.
	 * @param key Name of the variable.
	 * @return Variable value.
	 */
	public String getVar(String key) { return this.vars.get(key); }

	/**
	 * Gets the value of a variable if already defined otherwise the default value provided.
	 * @param key Name of the variable.
	 * @param defaultValue Default value to return if the variable is undefined.
	 * @return Variable value or default value.
	 */
	public String getVar(String key, String defaultValue) { return this.vars.getOrDefault(key, defaultValue); }

	/**
	 * Remove a variable from chat session.
	 * @param key Name of the variable to remove.
	 */
	public void removeVar(String key) { this.vars.remove(key); }

	/**
	 * Remove all vars from chat session.
	 */
	public void clearVars() { this.vars.clear(); }

	/**
	 * Gets the variables set.
	 * @return Chat session variables set.
	 */
	public Set<Map.Entry<String, String>> getVarsSet() { return this.vars.entrySet(); }

	/**
	 * @return Gets the lines count to include in the AI context when sending messages to the AI model server.
	 */
	public int getAiContextLinesCount() { return this.nAiContextLines; }

	/**
	 * Sets the lines count to include in the AI context when sending messages to the AI model server.
	 * @param n Lines count to include in the AI context.
	 */
	public void setAiContextLinesCount(int n) { this.nAiContextLines = n; }

	/**
	 * Gets a message at index from the chat history.
	 * @param index Index of the message to return.
	 * @return Message at index.
	 */
	public String getHistoryChatMessage(int index) { return this.chatMsg.get(index); }

	/**
	 * Clears the history chat messages.
	 */
	public void clearHistoryChatMessage() { this.chatMsg.clear(); }

	/**
	 * @return Chat messages count in the chat history.
	 */
	public int getHistoryChatMessagesCount() { return this.chatMsg.size(); }

	/**
	 * @return Bot name.
	 */
	public String getBotName() { return this.botName; }

	/**
	 * Changes the bot name of the instance.
	 * @param name Chat bot new name.
	 */
	public void setBotName(String name) { this.botName = name; }

	/**
	 * @return AI model guidelines.
	 */
	public String getAiModelGuidelines() { return this.aiModelGuidelines; }

	/**
	 * Sets new guidelines for the AI model.
	 * @param guidelines New guidelines for the AI model.
	 */
	public void setAiModelGuidelines(String guidelines) { this.aiModelGuidelines = guidelines; }

	/**
	 * @return Bot script.
	 */
	public String getBotScript() { return this.botScript; }

	/**
	 * Sets new bot script.
	 * @param script New bot script.
	 */
	public void setBotScript(String script) { this.botScript = script; }

	/**
	 * Gets an AI model param identified by the key param. AI model params are defined in the RIA file.
	 * @param key
	 * @return
	 */
	public String getAiModelParam(String key) { return this.aiModelParams.get(key); }

	/**
	 * Adds an AI model param.
	 * @param key AI model param name.
	 * @param value AI model param value.
	 */
	public void addAiModelParam(String key, String value) { this.aiModelParams.put(key, value); }

	/**
	 * @return AI model params set.
	 */
	public Set<Map.Entry<String, String>> getAiModelParamsEntrySet() { return this.aiModelParams.entrySet(); }

	/**
	 * This is useful for localized error messages.
	 * @return Default error message. If not defined in the RIA file, returns an empty string.
	 */
	public String getDefaultErrorMessage() { return this.aiModelParams.containsKey("default_error_msg") ? this.aiModelParams.get("default_error_msg") : ""; } //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$

	/**
	 * This is useful for localized error messages when no agent is available.
	 * @return Default error message. If not defined in the RIA file, returns an empty string.
	 */
	public String getNoAgentErrorMessage() { return this.aiModelParams.containsKey("no_agent_error_msg") ? this.aiModelParams.get("no_agent_error_msg") : ""; } //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$

	/**
	 * Sets the root chat session that will be used to create new ones.
	 * @param ses Chat session object.
	 */
	public void setRootSession(ChatSession ses) { this.rootSession = ses; }

	/**
	 * @return Root chat session instance.
	 */
	public ChatSession getRootSession() { return this.rootSession; }

	/**
	 * @return True if this chat session is finished.
	 */
	public boolean isEnded() { return this.ended; }

	/**
	 * Sets the chat session as ended.
	 * @param ended New state of this chat session.
	 */
	public void setEnded(boolean ended) { this.ended = ended; }

	/**
	 * @return Last chat session message time.
	 */
	public long getLastMsgTime() { return this.lastMsgTime; }

	/**
	 * @return Chat session creation time.
	 */
	public long getCreationTime() { return this.creationTime; }

	/**
	 * @return Current RIA node of this chat session.
	 */
	public NodePanel.Data getCurrentNode() { return this.currentNode; }

	/**
	 * Sets current RIA node for this chat session.
	 * @param curNode New current node.
	 */
	public void setCurrentNode(NodePanel.Data curNode) { this.currentNode = curNode; }
}









